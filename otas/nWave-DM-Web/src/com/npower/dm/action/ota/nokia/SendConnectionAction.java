/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.npower.dm.action.ota.nokia;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.npower.dm.action.ActionHelper;
import com.npower.dm.action.BaseAction;
import com.npower.dm.core.Carrier;
import com.npower.dm.management.CarrierBean;
import com.npower.dm.util.NumberGenerator;
import com.npower.dm.util.NumberGeneratorFactory;
import com.npower.sms.client.SmsSender;
import com.npower.wap.nokia.NokiaOtaBrowserSettings;
import com.npower.wap.nokia.browser.AddressGPRS;
import com.npower.wap.nokia.browser.PPPAuthType;
import com.npower.wap.nokia.browser.Port;


/** 
 * MyEclipse Struts
 * Creation date: 11-17-2006
 * 
 * XDoclet definition:
 * @struts.action path="/notification/send" name="NotificationForm" input="/notification/input" scope="request" validate="true"
 * @struts.action-forward name="success" path="aaaaa" contextRelative="true"
 */
public class SendConnectionAction extends BaseAction {
  
  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    
    DynaValidatorForm form = (DynaValidatorForm)rawForm;
    String numberTemplate = form.getString("msisdn");
    NumberGeneratorFactory numberGeneratorFactory = NumberGeneratorFactory.newInstance();
    NumberGenerator numberGenerator = numberGeneratorFactory.getNumberGenerator(numberTemplate);
    List<String> numbers = numberGenerator.generate();
    try {
        NokiaOtaBrowserSettings settings = new NokiaOtaBrowserSettings();
        settings.setName(form.getString("OTA_NAME"));
        
        AddressGPRS address = new AddressGPRS(form.getString("OTA_PROXY"));
        address.setGprsAccessPointName(form.getString("OTA_GPRS_ACCESSPOINTNAME"));
        address.setPort(Port.value(form.getString("OTA_PORT")));
        
        // PPP Login parameters
        if (StringUtils.isNotEmpty(form.getString("OTA_PPP_AUTHNAME"))) {
           String pppAuthType = form.getString("OTA_PPP_AUTHTYPE");
           if (pppAuthType.equals("PAP")) {
              address.setPppAuthType(PPPAuthType.PAP);
           } else if (pppAuthType.equals("CHAP")) {
             address.setPppAuthType(PPPAuthType.CHAP);
           } else if (pppAuthType.equals("MS_CHAP")) {
             address.setPppAuthType(PPPAuthType.MS_CHAP);
           }
           address.setPppAuthName(form.getString("OTA_PPP_AUTHNAME"));
           address.setPppAuthSecret(form.getString("OTA_PPP_AUTHSECRET"));
        }
        settings.addAddress(address);
        
        // Proxy
        if (StringUtils.isNotEmpty(form.getString("OTA_PROXY_AUTHNAME"))) {
           address.setProxyAuthName(form.getString("OTA_PROXY_AUTHNAME"));
           address.setProxyAuthSecret(form.getString("OTA_PROXY_AUTHSECRET"));
        }
        
        // Bookmark
        if (StringUtils.isNotEmpty(form.getString("OTA_URL"))) {
           settings.setUrl(form.getString("OTA_URL"));
           settings.addBookmark(form.getString("OTA_NAME"), form.getString("OTA_URL"));
        }
        
        // MMS
        if (StringUtils.isNotEmpty(form.getString("OTA_MMSURL"))) {
           settings.setMmsurl(form.getString("OTA_MMSURL"));
        }
  
        // Get SMS Sender
        String carrierID = form.getString("carrierID");
        Carrier carrier = null;
        if (StringUtils.isNotEmpty(carrierID)) {
           CarrierBean carrierBean = this.getManagementBeanFactory(request).createCarrierBean();
           carrier = carrierBean.getCarrierByID(carrierID);
        }
        SmsSender sender = ActionHelper.getSmsSender(carrier);
        for (String msisdn: numbers) {
            sender.send(settings.getSmsWapPushMessage(), msisdn, msisdn);
        }

        return mapping.findForward("success");
    } catch (Exception e) {
      throw e;
    } finally {
    }
  }
  
}