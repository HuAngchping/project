/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.npower.dm.action.ota.omacp;

import java.io.IOException;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;
import org.dom4j.DocumentException;

import com.npower.dm.action.ActionHelper;
import com.npower.dm.action.BaseLookupDispatchAction;
import com.npower.dm.core.Carrier;
import com.npower.dm.core.DMException;
import com.npower.dm.management.CarrierBean;
import com.npower.dm.management.ManagementBeanFactory;
import com.npower.dm.util.NumberGenerator;
import com.npower.dm.util.NumberGeneratorFactory;
import com.npower.dm.util.XMLPrettyFormatter;
import com.npower.sms.SmsException;
import com.npower.sms.client.SmsSender;
import com.npower.wap.omacp.InvalidateDataException;
import com.npower.wap.omacp.OMACPSecurityMethod;
import com.npower.wap.omacp.OMAClientProvSettings;
import com.npower.wap.omacp.Parameter;
import com.npower.wap.omacp.SimpleParameter;
import com.npower.wap.omacp.elements.AppAddrElement;
import com.npower.wap.omacp.elements.AppAuthElement;
import com.npower.wap.omacp.elements.ApplicationElement;
import com.npower.wap.omacp.elements.NAPAuthInfoElement;
import com.npower.wap.omacp.elements.NAPDefElement;
import com.npower.wap.omacp.elements.PXAuthInfoElement;
import com.npower.wap.omacp.elements.PXLogicalElement;
import com.npower.wap.omacp.elements.PXPhysicalElement;
import com.npower.wap.omacp.elements.PortElement;
import com.npower.wap.omacp.elements.ResourceElement;
import com.npower.wap.omacp.parameters.AddrType;
import com.npower.wap.omacp.parameters.AppAuthLevel;
import com.npower.wap.omacp.parameters.AppID;
import com.npower.wap.omacp.parameters.AuthType;
import com.npower.wap.omacp.parameters.Bearer;
import com.npower.wap.omacp.parameters.NAPAddrType;
import com.npower.wap.omacp.parameters.PXAddrType;
import com.npower.wap.omacp.parameters.PXAuthType;
import com.npower.wap.push.SmsWapPushMessage;
import com.npower.xml.TextXmlWriter;


/** 
 * MyEclipse Struts
 * Creation date: 11-17-2006
 * 
 * XDoclet definition:
 * @struts.action path="/notification/send" name="NotificationForm" input="/notification/input" scope="request" validate="true"
 * @struts.action-forward name="success" path="aaaaa" contextRelative="true"
 */
public abstract class BaseSendAction extends BaseLookupDispatchAction {
  
  
  protected Map getKeyMethodMap()
  {
    Map<String, String> map = new HashMap<String, String>();
    map.put("ota.omacp.button.send", "send");
    map.put("ota.omacp.button.viewXML", "viewXML");
    return(map);
  }

  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward send(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request, HttpServletResponse response) throws Exception {
    DynaValidatorForm form = (DynaValidatorForm)rawForm;
    
    try {
        OMAClientProvSettings settings = getSettings(form);
  
        // Send SMS
        this.sendSMS(this.getManagementBeanFactory(request), form, settings.getSmsWapPushMessage());
  
        return mapping.findForward("success");
    } catch (Exception e) {
      throw e;
    } finally {
    }
  }

  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward viewXML(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request, HttpServletResponse response) throws Exception {
    DynaValidatorForm form = (DynaValidatorForm)rawForm;
    
    try {
        OMAClientProvSettings settings = getSettings(form);
  
        // Convert to XML
        String xml = convertToXML(settings);
        request.setAttribute("settingsText", xml);
        
        return mapping.findForward("viewXML");
    } catch (Exception e) {
      throw e;
    } finally {
    }
  }

  /**
   * @param form
   * @param settings
   * @throws DMException
   * @throws SmsException
   * @throws IOException
   * @throws Exception
   */
  protected void sendSMS(ManagementBeanFactory factory, DynaValidatorForm form, SmsWapPushMessage message) throws DMException, SmsException, IOException, Exception {
    // Send SMS
    String numberTemplate = form.getString("msisdn");
    NumberGeneratorFactory numberGeneratorFactory = NumberGeneratorFactory.newInstance();
    NumberGenerator numberGenerator = numberGeneratorFactory.getNumberGenerator(numberTemplate);
    List<String> numbers = numberGenerator.generate();

    // Get SMS Sender
    String carrierID = form.getString("carrierID");
    Carrier carrier = null;
    if (StringUtils.isNotEmpty(carrierID)) {
       CarrierBean carrierBean = factory.createCarrierBean();
       carrier = carrierBean.getCarrierByID(carrierID);
    }
    SmsSender sender = ActionHelper.getSmsSender(carrier);

    for (String msisdn: numbers) {
        sender.send(message, msisdn, msisdn);
    }
  }

  /**
   * @param settings
   * @return
   * @throws InvalidateDataException
   * @throws IOException
   * @throws Exception
   * @throws DocumentException
   */
  protected String convertToXML(OMAClientProvSettings settings) throws InvalidateDataException, IOException, Exception, DocumentException {
    StringWriter result = new StringWriter();
    TextXmlWriter xmlWriter = new TextXmlWriter(result);
    settings.writeXmlTo(xmlWriter);
    XMLPrettyFormatter formatter = new XMLPrettyFormatter(result.toString());
    String xml = formatter.format();
    return xml;
  }


  /**
   * Generate a NAP Settings based on form.
   * @param form
   * @return
   */
  protected OMAClientProvSettings getNAPSettings(DynaValidatorForm form) {
    OMAClientProvSettings settings = new OMAClientProvSettings();
    
    // NAP
    String napName = form.getString("OTAOMA_NAME");
    NAPDefElement napDefElement = prepareNAPSetting(form, napName);
    settings.addNAPDefElement(napDefElement);
    
    // Browser Settings
    ApplicationElement appElement = this.createAppW2(form, napDefElement, null, napName);
    settings.addApplicationElement(appElement);
    
    // Append OTA Pin
    appendOTASPin(form, settings);
    return settings;
  }
  
  /**
   * @param form
   * @return
   */
  protected OMAClientProvSettings getProxySettings(DynaValidatorForm form) {
    OMAClientProvSettings settings = new OMAClientProvSettings();
    
    // Setting Name
    String name = form.getString("OTAOMA_NAME");
    
    // NAP
    String napName = name + "NAP";
    NAPDefElement napDefElement = prepareNAPSetting(form, napName);
    settings.addNAPDefElement(napDefElement);
    
    // Proxy
    String startPage = form.getString("OTAOMA_PXLOGICAL_STARTPAGE");
    PXLogicalElement pxLogicElement = prepareProxyDocument(form, name, napDefElement, startPage);
    if (pxLogicElement != null) {
       settings.addPXLogicalElement(pxLogicElement);
    }
    
    // Browser Settings
    ApplicationElement appElement = this.createAppW2(form, napDefElement, pxLogicElement, name);
    settings.addApplicationElement(appElement);
    
    // Append OTA Pin
    appendOTASPin(form, settings);
    return settings;
  }

  /**
   * @param form
   * @return
   */
  protected OMAClientProvSettings getMMSSettings(DynaValidatorForm form) {
    OMAClientProvSettings settings = new OMAClientProvSettings();
    
    // Setting Name
    String name = form.getString("OTAOMA_NAME");
    String mmsURL = form.getString("OTAOMA_MMSCURL");
    
    // NAP
    String napName = name + "NAP";
    NAPDefElement napDefElement = prepareNAPSetting(form, napName);
    settings.addNAPDefElement(napDefElement);
    
    // Proxy
    String proxyName = name + "PXY";
    String startPage = mmsURL;
    PXLogicalElement pxLogicElement = prepareProxyDocument(form, proxyName, napDefElement, startPage);
    if (pxLogicElement != null) {
       pxLogicElement.setStartPage("http://aaa/com.cn");
       settings.addPXLogicalElement(pxLogicElement);
    }
    
    // MMS
    ApplicationElement app = prepareMMSDocument(napDefElement, pxLogicElement, form, name);
    settings.addApplicationElement(app);
    
    // Append OTA Pin
    appendOTASPin(form, settings);
    return settings;
  }

  /**
   * @param form
   * @return
   */
  protected OMAClientProvSettings getImpsSettings(DynaValidatorForm form) {
    OMAClientProvSettings settings = new OMAClientProvSettings();
    
    // Setting Name
    String name = form.getString("OTAOMA_NAME");
    
    // NAP
    String napName = name + "NAP";
    NAPDefElement napDefElement = prepareNAPSetting(form, napName);
    settings.addNAPDefElement(napDefElement);
    
    // IMPS Application
    ApplicationElement app = prepareImpsSetting(form, napName, napDefElement);
    settings.addApplicationElement(app);
    
    // Append OTA Pin
    appendOTASPin(form, settings);
    return settings;
  }

  /**
   * @param form
   * @return
   */
  protected OMAClientProvSettings getPocSettings(DynaValidatorForm form) {
    OMAClientProvSettings settings = new OMAClientProvSettings();
    
    // Setting Name
    String name = form.getString("OTAOMA_NAME");
    
    // NAP
    String napName = name + "NAP";
    NAPDefElement napDefElement = prepareNAPSetting(form, napName);
    settings.addNAPDefElement(napDefElement);
    
    // POC Application
    ApplicationElement app = preparePocSetting(form, name, napDefElement);
    settings.addApplicationElement(app);
    
    // Append OTA Pin
    appendOTASPin(form, settings);
    return settings;
  }

  /**
   * @param form
   * @return
   */
  protected OMAClientProvSettings getEmailSettings(DynaValidatorForm form) {
    OMAClientProvSettings settings = new OMAClientProvSettings();
    
    // Setting Name
    String name = form.getString("OTAOMA_NAME");
    
    // NAP
    String napName = name + "NAP";
    NAPDefElement napDefElement = prepareNAPSetting(form, napName);
    settings.addNAPDefElement(napDefElement);
    
    // Email Application
    ApplicationElement smtpApp = prepareSmtpSetting(form, name, napDefElement);
    settings.addApplicationElement(smtpApp);
    ApplicationElement popOrImaplApp = prepareIncommingEmailSetting(form, name, napDefElement);
    settings.addApplicationElement(popOrImaplApp);
    
    // Append OTA Pin
    appendOTASPin(form, settings);
    return settings;
  }

  /**
   * @param form
   * @return
   */
  protected OMAClientProvSettings getSyncDSSettings(DynaValidatorForm form) {
    OMAClientProvSettings settings = new OMAClientProvSettings();
    
    // Setting Name
    String name = form.getString("OTAOMA_NAME");
    String dsServerURI = form.getString("OTAOMA_SYNCML_HOSTADDR");
    
    // NAP
    String napName = name + "_AP";
    NAPDefElement napDefElement = prepareNAPSetting(form, napName);
    settings.addNAPDefElement(napDefElement);
    
    // Proxy
    String proxyName = name + "_PXY";
    String startPage = dsServerURI;
    PXLogicalElement pxLogicElement = prepareProxyDocument(form, proxyName, napDefElement, startPage);
    if (pxLogicElement != null) {
       settings.addPXLogicalElement(pxLogicElement);
    }
    
    // Sync DS Application
    ApplicationElement app = prepareSyncDSSetting(form, name, napDefElement, pxLogicElement);
    settings.addApplicationElement(app);
    
    // Append OTA Pin
    appendOTASPin(form, settings);
    return settings;
  }

  /**
   * @param form
   * @param name
   * @param napDefElement
   * @return
   */
  private ApplicationElement preparePocSetting(DynaValidatorForm form, String name, NAPDefElement napDefElement) {
    ApplicationElement app = new ApplicationElement("w9002");
    app.setName(name);
    if (napDefElement != null) {
      app.addToNAPID(napDefElement.getNapID());
    }
    String pocAddr = form.getString("OTAOMA_POC_ADDR");
    String pocPort = form.getString("OTAOMA_POC_PORT");
    AppAddrElement addr = new AppAddrElement(pocAddr);
    String addrType = form.getString("OTAOMA_POC_ADDR_TYPE");
    addr.setAddrType(AddrType.value(addrType));
    addr.addPort(new PortElement(pocPort));
    app.addAppAddrElement(addr);
    
    AppAuthElement auth = new AppAuthElement();
    String authData = form.getString("OTAOMA_POC_AUTH_DATA");
    auth.setAppAuthData(authData);
    String authName = form.getString("OTAOMA_POC_AUTH_NAME");
    auth.setAppAuthName(authName);
    String authSecret = form.getString("OTAOMA_POC_AUTH_SECRET");
    auth.setAppAuthSecret(authSecret);
    app.addAppAuthElement(auth);
    return app;
  }
  
  /**
   * @param form
   * @param napName
   * @param napDefElement
   * @return
   */
  private ApplicationElement prepareImpsSetting(DynaValidatorForm form, String napName, NAPDefElement napDefElement) {
    ApplicationElement app = new ApplicationElement(AppID.WA_Wireless_Village_User_Agent);
    app.setName(napName);
    app.addToNAPID(napDefElement.getNapID());
    app.addAddr(form.getString("OTAOMA_IMPS_HOSTADDR"));
    
    AppAuthElement auth = new AppAuthElement();
    auth.setAppAuthLevel(AppAuthLevel.APPSRV);
    auth.setAppAuthName(form.getString("OTAOMA_IMPS_USERNAME"));
    auth.setAppAuthSecret(form.getString("OTAOMA_IMPS_PASSWORD"));
    app.addAppAuthElement(auth);
    return app;
  }
  
  /**
   * @param form
   * @param napName
   * @param napDefElement
   * @return
   */
  private ApplicationElement prepareIncommingEmailSetting(DynaValidatorForm form, String name, NAPDefElement napDefElement) {
    String protocol = form.getString("OTAOMA_EMAIL_APPID");
    AppID appID = (protocol.equals("110"))?AppID.Email_POP3:AppID.Email_IMAP4;
    ApplicationElement app = new ApplicationElement(appID);
    app.setProviderID(form.getString("OTAOMA_EMAIL_FROM"));
    app.setName(name);
    app.addToNAPID(napDefElement.getNapID());
    
    AppAddrElement appAddr = new AppAddrElement(form.getString("OTAOMA_EMAIL_INADDR"));
    appAddr.addPort(new PortElement(form.getString("OTAOMA_EMAIL_INADDR_PORTNBR")));
    app.addAppAddrElement(appAddr);
    

    AppAuthElement auth = new AppAuthElement();
    auth.setAppAuthName(form.getString("OTAOMA_EMAIL_AAUTHNAME"));
    auth.setAppAuthSecret(form.getString("OTAOMA_EMAIL_AAUTHSECRET"));
    app.addAppAuthElement(auth);
    return app;
  }

  /**
   * @param form
   * @param napName
   * @param napDefElement
   * @return
   */
  private ApplicationElement prepareSmtpSetting(DynaValidatorForm form, String name, NAPDefElement napDefElement) {
    ApplicationElement app = new ApplicationElement(AppID.Email_SMTP);
    app.setProviderID(form.getString("OTAOMA_EMAIL_FROM"));
    app.setName(name);
    app.addToNAPID(napDefElement.getNapID());
    
    Parameter<String> fromParam = new SimpleParameter();
    fromParam.setName("FROM");
    fromParam.setValue(form.getString("OTAOMA_EMAIL_FROM"));
    app.addParameter(fromParam);
    
    AppAddrElement appAddr = new AppAddrElement(form.getString("OTAOMA_EMAIL_OUTADDR"));
    appAddr.addPort(new PortElement(form.getString("OTAOMA_EMAIL_OUTADDR_PORTNBR")));
    app.addAppAddrElement(appAddr);
    
    if ((Boolean)form.get("OTAOMA_EMAIL_SMTPAUTH")) {
       AppAuthElement auth = new AppAuthElement();
       auth.setAppAuthName(form.getString("OTAOMA_EMAIL_AAUTHNAME"));
       auth.setAppAuthSecret(form.getString("OTAOMA_EMAIL_AAUTHSECRET"));
       app.addAppAuthElement(auth);
    }
    return app;
  }
  

  /**
   * @param form
   * @param napName
   * @param napDefElement
   * @param pxLogicElement
   * @return
   */
  private ApplicationElement prepareSyncDSSetting(DynaValidatorForm form, String napName, NAPDefElement napDefElement, PXLogicalElement pxLogicElement) {
    ApplicationElement app = new ApplicationElement(AppID.W5_SyncML_PUSH_Application);
    app.setName(napName);
    if (pxLogicElement != null) {
       app.addToProxy(pxLogicElement.getProxyID());
    } else if (napDefElement != null) {
      app.addToNAPID(napDefElement.getNapID());
    }
    app.addAddr(form.getString("OTAOMA_SYNCML_HOSTADDR"));
    
    AppAuthElement auth = new AppAuthElement();
    auth.setAppAuthName(form.getString("OTAOMA_SYNCML_AAUTHNAME"));
    auth.setAppAuthSecret(form.getString("OTAOMA_SYNCML_AAUTHSECRET"));
    app.addAppAuthElement(auth);

    if (StringUtils.isNotEmpty(form.getString("OTAOMA_SYNCML_CONTACTS_URI"))) {
       ResourceElement res = new ResourceElement(form.getString("OTAOMA_SYNCML_CONTACTS_URI"));
       res.setName(form.getString("OTAOMA_SYNCML_CONTACTS_NAME"));
       res.setAppAccept("text/x-vcard");
       app.addResourceElement(res);
    }
    
    if (StringUtils.isNotEmpty(form.getString("OTAOMA_SYNCML_CALENDAR_URI"))) {
       ResourceElement res = new ResourceElement(form.getString("OTAOMA_SYNCML_CALENDAR_URI"));
       res.setName(form.getString("OTAOMA_SYNCML_CALENDAR_NAME"));
      res.setAppAccept("text/x-vcalendar");
        app.addResourceElement(res);
    }
    
    if (StringUtils.isNotEmpty(form.getString("OTAOMA_SYNCML_NOTES_URI"))) {
       ResourceElement res = new ResourceElement(form.getString("OTAOMA_SYNCML_NOTES_URI"));
       res.setName(form.getString("OTAOMA_SYNCML_NOTES_NAME"));
       res.setAppAccept("text/plain");
       app.addResourceElement(res);
    }
    return app;
  }
  
  /**
   * @param form
   * @param name
   * @return
   */
  private ApplicationElement prepareMMSDocument(NAPDefElement napElement, PXLogicalElement pxElement, DynaValidatorForm form, String name) {
    ApplicationElement app = new ApplicationElement(AppID.W4_MMS_User_Agent);
    app.setName(name);
    if (pxElement != null) {
       app.addToProxy(pxElement.getProxyID());
    } else if (napElement != null) {
      app.addToNAPID(napElement.getNapID());
    }
    String mmsURL = form.getString("OTAOMA_MMSCURL");
    app.addAddr(mmsURL);
    return app;
  }
  
  /**
   * @param form
   * @param name
   * @param napDefElement
   * @return
   */
  private PXLogicalElement prepareProxyDocument(DynaValidatorForm form, String name, NAPDefElement napDefElement, String startPage) {
    String proxyID = name + "PXID";
    String proxyAddr = form.getString("OTAOMA_PXLOGICAL_PXPHYSICAL_PXADDR");
    if (StringUtils.isEmpty(proxyAddr)) {
       return null;
    }
    
    PXLogicalElement pxLogicElement = new PXLogicalElement(proxyID, name);
    pxLogicElement.setStartPage(startPage);
    // PXAuthInfo
    if (StringUtils.isNotEmpty(form.getString("OTAOMA_PXLOGICAL_PXAUTHINFO_PXAUTH"))) {
       // PXAuthInfo
       PXAuthInfoElement pxAuthInfo = new PXAuthInfoElement(PXAuthType.HTTP_BASIC);
       pxAuthInfo.setPxAuthID(form.getString("OTAOMA_PXLOGICAL_PXAUTHINFO_PXAUTH"));
       pxAuthInfo.setPxAuthPW(form.getString("OTAOMA_PXLOGICAL_PXAUTHINFO_PXAUTH-PW"));
       pxLogicElement.addPXAuthInfoElement(pxAuthInfo);
    }
    
    // PXPhysical # 1
    {
      PXPhysicalElement phyElement = new PXPhysicalElement(name + "_PPxy", 
                                                           proxyAddr, 
                                                           napDefElement.getNapID());
      phyElement.setPxAddrType(PXAddrType.IPV4);
      String portNum = form.getString("OTAOMA_PXLOGICAL_PXPHYSICAL_PORT_PORTNBR");
      PortElement port = new PortElement(portNum);
      phyElement.addPortElement(port);

      pxLogicElement.addPXPhysicalElement(phyElement);
    }
    
    return pxLogicElement;
  }
  
  /**
   * @param form
   * @param settings
   */
  private void appendOTASPin(DynaValidatorForm form, OMAClientProvSettings settings) {
    // Pin
    if (StringUtils.isNotEmpty(form.getString("OTAPINTYPE")) 
        && StringUtils.isNotEmpty(form.getString("OTAPIN"))) {
       
       String tmp = form.getString("OTAPINTYPE");
       OMACPSecurityMethod type = null;
       if (tmp.equals("USERPIN")) {
          type = OMACPSecurityMethod.USERPIN;
       } else if (tmp.equals("NETWPIN")) {
         type = OMACPSecurityMethod.NETWPIN;
       }
       
       settings.setSecurityMethod(type);
       settings.setPIN(form.getString("OTAPIN"));
    }
  }
  
  /**
   * @param form
   * @param napName
   * @return
   */
  private NAPDefElement prepareNAPSetting(DynaValidatorForm form, String napName) {
    String napAPN = form.getString("OTAOMA_NAPDEF_NAP-ADDRESS");
    String napBearer = form.getString("OTAOMA_NAPDEF_BEARER");
    String napID = napName + "ID";
    NAPDefElement napDefElement = new NAPDefElement(napID, napName, napAPN);
    napDefElement.addBearer(Bearer.value(napBearer));
    napDefElement.setNapAddrType(NAPAddrType.APN);
    
    if (StringUtils.isNotEmpty(form.getString("OTAOMA_NAPDEF_NAPAUTHINFO_AUTHNAME"))) {
       NAPAuthInfoElement napAuthInfo = new NAPAuthInfoElement(AuthType.value(form.getString("OTAOMA_NAPDEF_NAPAUTHINFO_AUTHTYPE")));
       napAuthInfo.setAuthName(form.getString("OTAOMA_NAPDEF_NAPAUTHINFO_AUTHNAME"));
       napAuthInfo.setAuthSecret(form.getString("OTAOMA_NAPDEF_NAPAUTHINFO_AUTHSECRET"));
       napDefElement.addNapAuthInfo(napAuthInfo);
    }
    return napDefElement;
  }
  
  /**
   * Create W2 app settings: Browser
   * @return settings
   */
  private ApplicationElement createAppW2(DynaValidatorForm form, NAPDefElement napElement, PXLogicalElement pxElement, String name) {
    ApplicationElement app = new ApplicationElement(AppID.W2_WML_User_Agent);
    app.setName(name);
    if (pxElement != null) {
       app.addToProxy(pxElement.getProxyID());
    } else if (napElement != null) {
      app.addToNAPID(napElement.getNapID());
    }
   
    String startPage = form.getString("OTAOMA_PXLOGICAL_STARTPAGE");
    ResourceElement res = new ResourceElement(startPage);
    res.setName(name);
    res.setStartPage(startPage);
    app.addResourceElement(res);
    return app;
  }

  /**
   * Return OTA Settings 
   * @param form
   * @return
   */
  protected abstract OMAClientProvSettings getSettings(DynaValidatorForm form);
  
  
}