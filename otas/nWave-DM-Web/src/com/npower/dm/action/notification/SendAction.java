/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.npower.dm.action.notification;

import java.util.List;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.npower.dm.action.ActionHelper;
import com.npower.dm.action.BaseAction;
import com.npower.dm.core.Carrier;
import com.npower.dm.management.CarrierBean;
import com.npower.dm.management.ManagementBeanFactory;
import com.npower.dm.notifcation.NotificationService;
import com.npower.dm.util.ConfigHelper;
import com.npower.dm.util.NumberGenerator;
import com.npower.dm.util.NumberGeneratorFactory;
import com.npower.sms.client.SMSGWConnectionException;
import com.npower.wap.omacp.notification.Initiator;
import com.npower.wap.omacp.notification.UIMode;


/** 
 * MyEclipse Struts
 * Creation date: 11-17-2006
 * 
 * XDoclet definition:
 * @struts.action path="/notification/send" name="NotificationForm" input="/notification/input" scope="request" validate="true"
 * @struts.action-forward name="success" path="aaaaa" contextRelative="true"
 */
public class SendAction extends BaseAction {
  

  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    
    if (this.isCancelled(request)) {
       return this.canceld(mapping, rawForm, request, response);
    }
    
    DynaValidatorForm form = (DynaValidatorForm) rawForm;
    
    String numberTemplate = form.getString("phoneNumbers");
    NumberGeneratorFactory numberGeneratorFactory = NumberGeneratorFactory.newInstance();
    NumberGenerator numberGenerator = numberGeneratorFactory.getNumberGenerator(numberTemplate);
    List<String> numbers = numberGenerator.generate();

    String uiMode = form.getString("uiMode");
    String initiator = form.getString("initiator");
    long scheduleTime = 0L;
    
    ManagementBeanFactory beanFactory = this.getManagementBeanFactory(request);
    try {
        CarrierBean carrierBean = beanFactory.createCarrierBean();
        
        int sessionID = (int)System.currentTimeMillis();
        // Get DM Server ID
        Properties profile = ConfigHelper.getGlobalBootstrapProfile();
        String dmServerID = profile.getProperty("dm_service_id");
        String dmServerPassword = profile.getProperty("dm_service_srv_pwd");

        for (String msisdn: numbers) {
            if (StringUtils.isNotEmpty(msisdn)) {
               // Get a Notification Service.
               Carrier carrier = carrierBean.findCarrierByPhoneNumberPolicy(msisdn);
               NotificationService notifiService = ActionHelper.getNotificationService(beanFactory, carrier);
               int maxRetry = -1;
               long maxDuration = -1;
               if (carrier != null) {
                  maxRetry = (int)carrier.getNotificationMaxNumRetries();
                  maxDuration = carrier.getBootstrapTimeout() * 1000;
               }
               notifiService.notificate(msisdn, dmServerID, dmServerPassword, sessionID, UIMode.value(uiMode), Initiator.value(initiator), scheduleTime, maxRetry, maxDuration);
            }
        }
        return mapping.findForward("success");
    } catch (SMSGWConnectionException e) {
      return mapping.findForward("failure");
    } catch (Exception e) {
      throw e;
    } finally {
    }
  }
  
  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward canceld(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    
    return mapping.findForward("cancel");
  }
}