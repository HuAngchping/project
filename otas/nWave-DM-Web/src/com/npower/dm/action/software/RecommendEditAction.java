/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.npower.dm.action.software;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.util.LabelValueBean;

import com.npower.dm.action.BaseAction;
import com.npower.dm.core.Software;
import com.npower.dm.core.SoftwareCategory;
import com.npower.dm.management.ManagementBeanFactory;
import com.npower.dm.management.SoftwareBean;
import com.npower.dm.management.SoftwareTopListBean;

/**
 * MyEclipse Struts Creation date: 08-25-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class RecommendEditAction extends BaseAction {
  /*
   * Generated Methods
   */

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm Rowform, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    DynaActionForm form = (DynaActionForm) Rowform;
    String id = form.getString("categoryId");
    ManagementBeanFactory factory = null;
    try {
      factory = this.getManagementBeanFactory(request);
      SoftwareBean bean = factory.createSoftwareBean();
      SoftwareTopListBean topListBean = factory.createSoftwareTopListBean();
      List<Object> recommendList = new ArrayList<Object>();
      Set<Software> recommendSet = new TreeSet<Software>();
      List<Object> topList = new ArrayList<Object>();

      // Load data for Tree
      RecommendsAction.loadRecommendTree(factory, this.getServlet().getServletContext(), request);
      if (StringUtils.isNotEmpty(id)) {

        SoftwareCategory currentCategory = bean.getCategoryByID(Long.parseLong(id));
        request.setAttribute("category", currentCategory);
        recommendSet.addAll((Collection<? extends Software>) currentCategory.getAllOfSoftwares());
        int i = 1;
        for (Software currentSoftware : recommendSet) {
          Long softwareId = currentSoftware.getId();
          recommendList.add(new LabelValueBean(i + ". " + currentSoftware.getName() + (currentSoftware.getVersion() == null ? "" : " V" + currentSoftware.getVersion()), softwareId.toString()));
          i++;
        }
        request.setAttribute("RecommendSoftwares", recommendList);

        Collection<Software> top = topListBean.getRecommendedSoftwares(currentCategory);
        int j = 1;
        for (Software software : top) {
          Long softwareId = software.getId();
          topList.add(new LabelValueBean(j + ". " + software.getName() + (software.getVersion() == null ? "" : " V" + software.getVersion()), softwareId.toString()));
          j++;
        }
        request.setAttribute("RecommendedSoftwares", topList);
        request.setAttribute("AddLocationLabels", currentCategory.getPath());
      } else {
        int i = 1;
        for (Software software : bean.getAllOfSoftwares()) {
          Long softwareId = software.getId();
          recommendList.add(new LabelValueBean(i + ". " + software.getName() + (software.getVersion() == null ? "" : " V" + software.getVersion()), softwareId.toString()));
          i++;
        }
        request.setAttribute("RecommendSoftwares", recommendList);
        
        Collection<Software> top = topListBean.getRecommendedSoftwares(null);
        int j = 1;
        for (Software software : top) {
          Long softwareId = software.getId();
          topList.add(new LabelValueBean(j + ". " + software.getName() + (software.getVersion() == null ? "" : " V" + software.getVersion()), softwareId.toString()));
          j++;
        }
        request.setAttribute("RecommendedSoftwares", topList);
      }
    } catch (Exception ex) {
      if (factory != null) {
        factory.rollback();
      }
      throw ex;
    }
    return mapping.findForward("edit");
  }
}