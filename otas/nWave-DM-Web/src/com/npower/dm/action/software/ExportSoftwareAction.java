/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.npower.dm.action.software;


import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.npower.dm.action.BaseDispatchAction;
import com.npower.dm.core.Software;
import com.npower.dm.core.SoftwareCategory;
import com.npower.dm.core.SoftwareVendor;
import com.npower.dm.export.XMLWriter4Software;
import com.npower.dm.export.XMLWriter4SoftwareCategory;
import com.npower.dm.export.XMLWriter4SoftwareVendor;
import com.npower.dm.management.ManagementBeanFactory;
import com.npower.dm.management.SoftwareBean;

/** 
 * MyEclipse Struts
 * Creation date: 12-02-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ExportSoftwareAction extends BaseDispatchAction {


  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   * @throws IOException 
   */
  public ActionForward exportData(ActionMapping mapping, ActionForm form, HttpServletRequest request,
      HttpServletResponse response) throws Exception  {
    
    SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmm");
    Date now = new Date();
    String filename = format.format(now);
        
    File file = new File(System.getProperty("otas.dm.home"),"./output/softwares");
    if (!file.exists()) {
      file.mkdirs();
    }
    file = new File(file,filename+".xml");
           
    FileWriter writer = new FileWriter(file);
    
    XMLWriter4Software writer4Software = new XMLWriter4Software(writer);
    XMLWriter4SoftwareVendor writer4Vendor = new XMLWriter4SoftwareVendor(writer);
    XMLWriter4SoftwareCategory writer4Category = new XMLWriter4SoftwareCategory(writer);

    ManagementBeanFactory factory = this.getManagementBeanFactory(request);
    SoftwareBean softwareBean = factory.createSoftwareBean();
     
    writer.write("<?xml version='1.0' encoding='UTF-8'?>");
    writer4Category.writeHeader();

    // Export Categories
    List<SoftwareCategory> softwareCategorys = softwareBean.getAllOfRootCategories();
    for(SoftwareCategory softwareCategory : softwareCategorys){
      writer4Category.writeBody(softwareCategory);
    } 
    writer4Category.writeEnd();
    writer.flush();
    writer.write('\n');
    // Export Vendors
    writer4Vendor.writeHeader();
    List<SoftwareVendor> softwareVendors = softwareBean.getAllOfVendors();
    for (SoftwareVendor softwareVendor : softwareVendors){
        writer4Vendor.writeBody(softwareVendor);
    } 
    writer4Vendor.writeEnd();
    writer.flush();

    //Export Software
    writer.write('\n');
    writer4Software.writeHeader();
    List<Software> softwares = softwareBean.getAllOfSoftwares();
    for(Software software : softwares){
      writer4Software.writeBody(software);
    } 
    writer4Software.writeEnd();
    writer.flush();
    writer.close();
    
    response.setContentType("text/html;charset=UTF-8");
    Writer out= response.getWriter();
    out.write("数据导出成功，文件路径为：" + file.getAbsolutePath());
    out.flush();
    out.close();
    return null;
  }

  public ActionForward downLoadData(ActionMapping mapping, ActionForm form, HttpServletRequest request,
      HttpServletResponse response) throws IOException{
    
     int buffer = 2048;
    SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmm");
    Date now = new Date();
    String filename = format.format(now);
    
    
    response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + ".zip\";"); 
    response.setContentType("text/xml;charset=UTF-8");
    
    BufferedInputStream bis = null;
    ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(response.getOutputStream()));
    byte data[] = new byte[buffer];
    
    File file = new File(System.getProperty("otas.dm.home"),"./output/softwares");
    if (!file.exists()) {
      file.mkdirs();
    }
    File[] files = file.listFiles();
    for (int i = 0; i < files.length; i++) {
      if(files[i].isDirectory()){
        File[] children = files[i].listFiles();
        for (int j = 0; j < children.length; j++){
          FileInputStream fis = new FileInputStream(children[j]);
          bis = new BufferedInputStream(fis,buffer);
          ZipEntry entry = new ZipEntry(getFileName(children[j]));
          out.putNextEntry(entry);
          int count;
          while ((count = bis.read(data, 0, buffer)) != -1){
            out.write(data, 0, count);
          }
          bis.close();          
        }  

      }else {
        FileInputStream fis = new FileInputStream(files[i]);
        bis = new BufferedInputStream(fis,buffer);
        ZipEntry entry = new ZipEntry(files[i].getName());
        out.putNextEntry(entry);
        int count;
        while ((count = bis.read(data, 0, buffer)) != -1){
          out.write(data, 0, count);
        }
        bis.close();
      }
    }
    out.close();
    
    return null;
  }

  private String getFileName(File file) throws IOException {
    String directory1 = file.getParentFile().getCanonicalPath();
    String directory2 = file.getParentFile().getParentFile().getCanonicalPath();
    String directory = directory1.substring(directory2.length()+1) + "/";
    return directory+file.getName();
  }  
}