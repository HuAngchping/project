/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.npower.dm.action.software;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;

import com.npower.dm.action.BaseAction;
import com.npower.dm.core.Software;
import com.npower.dm.core.SoftwareCategory;
import com.npower.dm.management.ManagementBeanFactory;
import com.npower.dm.management.SoftwareBean;
import com.npower.dm.management.SoftwareTopListBean;

/**
 * MyEclipse Struts Creation date: 08-25-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class RecommendSaveAction extends BaseAction {
  /*
   * Generated Methods
   */

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm Rowform, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    DynaActionForm form = (DynaActionForm) Rowform;
    String id = form.getString("categoryId");
    String[] recommendIds = form.getStrings("recommendIds");
    ManagementBeanFactory factory = null;
    try {
      factory = this.getManagementBeanFactory(request);
      SoftwareBean bean = factory.createSoftwareBean();
      SoftwareTopListBean topListBean = factory.createSoftwareTopListBean();

      // Load data for Tree
      RecommendsAction.loadRecommendTree(factory, this.getServlet().getServletContext(), request);

      if (StringUtils.isNotEmpty(id)) {
        SoftwareCategory currentCategory = bean.getCategoryByID(Long.parseLong(id));
        factory.beginTransaction();
        // Clear old recommended softwares
        for (Software s : topListBean.getRecommendedSoftwares(currentCategory)) {
          topListBean.setRecommendedPriority(s, currentCategory, -1);
        }

        // Save new result
        for (int i = 0; i < recommendIds.length; i++) {
          String softwareId = recommendIds[i];
          Software software = bean.getSoftwareByID(Long.parseLong(softwareId));
          topListBean.setRecommendedPriority(software, currentCategory, i);
        }
        factory.commit();

        request.setAttribute("category", currentCategory);
        request.setAttribute("recommendSoftwares", topListBean.getRecommendedSoftwares(currentCategory));
        request.setAttribute("AddLocationLabels", currentCategory.getPath());
        return mapping.findForward("view");
      } else {
        factory.beginTransaction();
        // Clear old recommended softwares
        for (Software s : topListBean.getRecommendedSoftwares(null)) {
          topListBean.setRecommendedPriority(s, null, -1);
        }
        // Save new result
        for (int i = 0; i < recommendIds.length; i++) {
          String softwareId = recommendIds[i];
          Software software = bean.getSoftwareByID(Long.parseLong(softwareId));
          topListBean.setRecommendedPriority(software, null, i);
        }
        factory.commit();
        request.setAttribute("recommendSoftwares", topListBean.getRecommendedSoftwares(null));
        return mapping.findForward("viewroot");
      }
    } catch (Exception ex) {
      if (factory != null) {
        factory.rollback();
      }
      throw ex;
    }
  }
}