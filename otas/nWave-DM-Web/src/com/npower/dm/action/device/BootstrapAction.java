package com.npower.dm.action.device;
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.npower.dm.action.ActionHelper;
import com.npower.dm.action.BaseDispatchAction;
import com.npower.dm.bootstrap.BootstrapService;
import com.npower.dm.core.DMException;
import com.npower.dm.core.Device;
import com.npower.dm.management.DeviceBean;
import com.npower.dm.management.ManagementBeanFactory;
import com.npower.sms.client.SMSGWConnectionException;
import com.npower.wap.omacp.OMACPSecurityMethod;

/** 
 * @struts.action
 */
public class BootstrapAction extends BaseDispatchAction {
  
  private Device findDevice(ManagementBeanFactory beanFactory, String deviceID) throws DMException {
    DeviceBean deviceBean = beanFactory.createDeviceBean();
    Device device = deviceBean.getDeviceByID(deviceID);
    if (device == null) {
       throw new DMException("Could not find device for Bootstrap by deviceID: " + deviceID);
    }
    return device;
  }

  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward input(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    
    if (this.isCancelled(request)) {
       return this.canceld(mapping, rawForm, request, response);
    }
    DynaValidatorForm form = (DynaValidatorForm) rawForm;
    String deviceID = form.getString("deviceID");

    try {
        form.set("pinType", OMACPSecurityMethod.USERPIN.getValue());

        ManagementBeanFactory beanFactory = this.getManagementBeanFactory(request);
        Device device = this.findDevice(beanFactory, deviceID);
        request.setAttribute("device", device);
  
        return mapping.findForward("input");
    } catch (DMException e) {
      throw e;
    }
  }
  
  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward send(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    
    if (this.isCancelled(request)) {
       return this.canceld(mapping, rawForm, request, response);
    }
    
    DynaValidatorForm form = (DynaValidatorForm) rawForm;
    String pin = form.getString("pin");
    String deviceID = form.getString("deviceID");
    OMACPSecurityMethod pinType = OMACPSecurityMethod.value((Byte)form.get("pinType"));
    
    ManagementBeanFactory beanFactory = this.getManagementBeanFactory(request);
    try {
        Device device = this.findDevice(beanFactory, deviceID);
        request.setAttribute("device", device);
        String deviceExternalID = device.getExternalId();
    
        // Get Time of schedule
        String jobScheduleString = form.getString("jobSchedule");
        Date scheduledTime = new Date();
        if (StringUtils.isNotEmpty(jobScheduleString)) {
           DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
           scheduledTime = formatter.parse(jobScheduleString);
        }
        
        // Get BootstrapService.
        BootstrapService service = ActionHelper.getBootstrapService(beanFactory, device.getSubscriber().getCarrier());
        int maxRetry = (int)device.getSubscriber().getCarrier().getNotificationMaxNumRetries();
        long maxDuration = device.getSubscriber().getCarrier().getBootstrapTimeout() * 1000;
        service.bootstrap(deviceExternalID, pinType, pin, scheduledTime.getTime(), maxRetry, maxDuration);
        
        return mapping.findForward("success");
    } catch (SMSGWConnectionException e) {
      return mapping.findForward("failure");
    } catch (Exception e) {
      throw e;
    } finally {
    }
  }

  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward canceld(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    
    DynaValidatorForm form = (DynaValidatorForm) rawForm;
    String deviceID = form.getString("deviceID");

    try {
        ManagementBeanFactory beanFactory = this.getManagementBeanFactory(request);
        Device device = this.findDevice(beanFactory, deviceID);
        request.setAttribute("device", device);
  
        return mapping.findForward("cancel");
    } catch (DMException e) {
      throw e;
    }
  }
  
}