/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.npower.dm.action.sms.wappushsi;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.npower.dm.action.ActionHelper;
import com.npower.dm.action.BaseAction;
import com.npower.dm.core.Carrier;
import com.npower.dm.management.CarrierBean;
import com.npower.dm.util.DurationGenerator;
import com.npower.dm.util.NumberGenerator;
import com.npower.dm.util.NumberGeneratorFactory;
import com.npower.sms.SmsBuilder;
import com.npower.sms.SmsMessage;
import com.npower.sms.client.SmsSender;


public class SendAction extends BaseAction {
  
  private static Log log = LogFactory.getLog(SendAction.class);
  
  
  /** 
   * Method execute
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request, HttpServletResponse response) throws Exception {
    DynaValidatorForm form = (DynaValidatorForm)rawForm;
    
    try {
        String content = form.getString("content");
        String url = form.getString("url");
        
        // Send SMS
        String numberTemplate = form.getString("msisdn");
        NumberGeneratorFactory numberGeneratorFactory = NumberGeneratorFactory.newInstance();
        NumberGenerator numberGenerator = numberGeneratorFactory.getNumberGenerator(numberTemplate);
        List<String> numbers = numberGenerator.generate();
        
        Integer minDuration = (Integer)form.get("minDuration");
        if (minDuration == null) {
           minDuration = new Integer(0);
        }
        Integer maxDuration = (Integer)form.get("maxDuration");
        if (maxDuration == null) {
           maxDuration = new Integer(0);
        }

        String scheduleString = form.getString("scheduleTime");
        Date scheduleTime = new Date();
        if (StringUtils.isNotEmpty(scheduleString)) {
           DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
           scheduleTime = formatter.parse(scheduleString);
        }

        // Get SMS Sender
        String carrierID = form.getString("carrierID");
        Carrier carrier = null;
        if (StringUtils.isNotEmpty(carrierID)) {
           CarrierBean carrierBean = this.getManagementBeanFactory(request).createCarrierBean();
           carrier = carrierBean.getCarrierByID(carrierID);
        }
        SmsSender sender = ActionHelper.getSmsSender(carrier);
        
        MacroProcessor processor = new MacroProcessor();
        processor.setFactory(this.getManagementBeanFactory(request));

        // Begin Time
        long beginTime = scheduleTime.getTime();
        for (String msisdn: numbers) {
            String url4Message = processor.process(url, msisdn);
            String content4Message = processor.process(content, msisdn);
            
            SmsMessage message = SmsBuilder.createWapSiPushMsg(url4Message, content4Message);
            
            sender.send(message, msisdn, msisdn, beginTime);
            
            // Caculate next schedule time for next message.
            beginTime += 1000 * DurationGenerator.random(minDuration, maxDuration);
            
            log.info("Submit a WapSi, url: " + url4Message + ", content: " + content4Message);
        }
  
        return mapping.findForward("success");
    } catch (Exception e) {
      throw e;
    } finally {
    }
  }
  
}