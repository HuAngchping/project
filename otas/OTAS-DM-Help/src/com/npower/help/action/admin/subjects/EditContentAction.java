/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.npower.help.action.admin.subjects;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;

import com.npower.help.action.ActionHelper;
import com.npower.help.action.HelpDAOPersistentManager;
import com.npower.help.core.Subject;
import com.npower.help.core.SubjectContent;
import com.npower.help.core.SubjectLocale;
import com.npower.help.dao.HelpDAOFactory;
import com.npower.help.dao.SubjectContentDAO;
import com.npower.help.dao.SubjectDAO;
import com.npower.help.dao.SubjectLocaleDAO;

/**
 * MyEclipse Struts Creation date: 06-30-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class EditContentAction extends Action {
  /*
   * Generated Methods
   */

  /**
   * Method execute
   * 
   * @param mapping
   * @param form
   * @param request
   * @param response
   * @return ActionForward
   */
  public ActionForward execute(ActionMapping mapping, ActionForm rawForm, HttpServletRequest request,
      HttpServletResponse response) throws Exception {
    HelpDAOFactory factory = null;
    DynaActionForm form = (DynaActionForm) rawForm;
    try {
      factory = HelpDAOPersistentManager.getManagementBeanFactory(request);
      // Load Subjects Tree
      ActionHelper.loadSubjectsTree(this.getServlet().getServletContext(), request, factory);

      SubjectDAO subjectDAO = factory.getSubjectDAO();
      SubjectLocaleDAO localeDAO = factory.getSubjectLocaleDAO();
      SubjectContentDAO contentDAO = factory.getSubjectContentDAO();

      // 提取当前页面Subject
      String subjectId = form.getString("subjectId");
      Subject subject = null;
      if (StringUtils.isNotEmpty(subjectId)) {
        subject = subjectDAO.findById(Long.parseLong(subjectId));
        request.setAttribute("subject", subject);
        request.getSession().setAttribute("subjectId", subjectId);
      }

      // 提取当前页面的SubjectLocale
      String localeId = form.getString("localeId");
      SubjectLocale currentLocale = ActionHelper.getDefaultSubjectLocale(factory);

      if (StringUtils.isNotEmpty(localeId)) {
        currentLocale = localeDAO.findById(localeId);
      }
      request.setAttribute("currentLocale", currentLocale);
      request.getSession().setAttribute("localeId", localeId);
      request.getSession().setAttribute("defaultLocaleId", currentLocale.getId());

      // 当前Subject的Locale列表
      Set<SubjectLocale> localeList = new HashSet<SubjectLocale>();
      localeList.add(currentLocale);
      for (SubjectContent content : subject.getSubjectContents()) {
        localeList.add(content.getSubjectLocale());
      }
      request.setAttribute("localeList", localeList);

      // 获取Location
      List<Subject> subjects4Location = new ArrayList<Subject>();
      Subject location = subject;
      while (location != null) {
        subjects4Location.add(0, location);
        location = location.getParent();
      }
      request.setAttribute("subjects4Location", subjects4Location);

      SubjectContent currentContent = contentDAO.getSubjectContent(subject, currentLocale);
      request.setAttribute("SubjectLocale", currentLocale);
      if (currentContent != null) {
        request.setAttribute("currentContent", currentContent);
        form.set("name", currentContent.getName());
        form.set("description", currentContent.getDescription());
        form.set("keywords", currentContent.getKeywords());
        form.set("content", currentContent.getContent());
      }
    } catch (Throwable e) {
      if (factory != null) {
        factory.rollback();
      }
      throw new Exception(e.getMessage(), e);
    }
    return mapping.findForward("edit");
  }
}